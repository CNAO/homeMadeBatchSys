#!/bin/bash

# FLUKA env var must be defined!

caseDir=""
scorings="RESNUCLE,USRBIN,USRBDX,USRTRACK"
inputFile=""
where="run_?????"
# log file
logFile=.`basename $0`.log

# log terminal line command
echo "`date +"[%Y-%m-%d %H:%M:%S]"` $0 $*" >> ${logFile}

# =================================================================================
# FUNCTIONs
# =================================================================================

die() {
  echo >&2 "$1"
  exit $E_BADARGS
}

how_to_use() {
       script_name=`basename $0`
cat <<EOF

       ${script_name} [options]
       Script for merging FLUKA binary files generated by parallel jobs, i.e.
         identical simulations different ony by the starting seed.
       Multiple parallel jobs of a single case or group of jobs (cycles) 
         are handled: the study case is located in a dedicated folder
         and each parallel job is contained in a dedicated subfolder 
         (with its own I/O files), e.g.:
            ./C_Cu/
              |_ run_00001/
              |_ run_00002/
              |_ run_00003/
       The script should be called for acting on a single study case at
         a time, no matter the action; the call should be done from the parent
         folder.


       options:

       -c <caseDir>        sub-folder containing the study case
       	  		   --> NO defaults!

       -h                  print this help

       -i <inputFile>      FLUKA .inp file (with extenstion)
       	  		   --> NO defaults!

       -s <scorings>       FLUKA scoring detectors (cards)
       	  		   --> default: ${scorings[@]};

       -w <where>          subfolders where to look for FLUKA binary files
       	  		   --> default: ${where};

EOF
}

# ==============================================================================
# OPTIONs
# ==============================================================================

# get options
while getopts  ":c:hi:s:w:" opt ; do
  case $opt in
    c)
      caseDir=$OPTARG
      ;;
    h)
      how_to_use
      exit
      ;;
    i)
      inputFile=$OPTARG
      ;;
    s)
      myScorings=$OPTARG
      if [ "${myScorings}"!="all" ] ; then scorings=${myScorings} ; fi
      ;;
    w)
      where=$OPTARG
      ;;
    \?)
      die "Invalid option: -$OPTARG"
      ;;
    :)
      die "Option -$OPTARG requires an argument."
      ;;
  esac
done

scorings=(${scorings//,/ })

# check options
if [ -z "${caseDir}" ] ; then die "case NOT declared!" ; fi
if [ ! -d ${caseDir} ] ; then die "folder with original files does NOT exist!" ; fi
if [ -z "${inputFile}" ] ; then die ".inp file NOT declared!" ; fi
if [ ! -f ${caseDir}/${inputFile} ] ; then die ".inp file does NOT exist in folder ${caseDir}!" ; fi
if [ ${#scorings[@]} -eq 0 ] ; then die "no scorings specified!" ; fi

# ==============================================================================
# DO THINGs
# ==============================================================================

echo " merging binary result files of study ${caseDir} ..."
cd ${caseDir}
for myScor in ${scorings[@]} ; do
    case ${myScor}  in
        RESNUCLE)
            extension="rnc"
            exeMerge="usrsuw"
            myCol=3
            ;;
        USRBDX)
            extension="bnx"
            exeMerge="usxsuw"
            myCol=4
            ;;
        USRBIN)
            extension="bnn"
            exeMerge="usbsuw"
            myCol=4
            ;;
        USRTRACK)
            extension="trk"
            exeMerge="ustsuw"
            myCol=4
            ;;
        USRYIELD)
            extension="yie"
            exeMerge="usysuw"
            myCol=4
            ;;
        *)
            echo "...don't know how to process ${myScor} detectors! skipping..."
            continue
    esac
    echo "checking presence of ${myScor} cards in ${inputFile} file..."
    units=`grep ${myScor} ${inputFile} | grep -v -e DCYSCORE -e AUXSCORE | awk -v myCol=${myCol} '{un=-\$myCol; if (20<un && un<100) {print (un)}}' | sort -g | uniq`
    if [[ "${units}" == "" ]] ; then
        echo "...no cards found!"
        continue
    else
        units=( ${units} )
        echo "...found ${#units[@]} ${myScor} cards: processing..."
        for myUnit in ${units[@]} ; do
            echo " merging ${myScor} on unit ${myUnit} ..."
            ls -1 ${where}/*${myUnit} > ${myUnit}.txt
            echo "" >> ${myUnit}.txt
            echo "${inputFile%.inp}_${myUnit}.${extension}" >> ${myUnit}.txt
            ${FLUKA}/flutil/${exeMerge} < ${myUnit}.txt > ${myUnit}.log 2>&1
            rm ${myUnit}.*            
        done
    fi
done
cd - > /dev/null 2>&1
